name: Build, Push, and Deploy Docker Image

on:
  push:
    branches: [main]

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.meta.outputs.image }}
      tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
  
      - name: Install Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=branch
            type=ref,event=pr

      - name: Build and push Docker Image
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          push: true

  deploy:
    name: Deploy Docker Image
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: SSH to VM and Execute Docker
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ vars.VM_HOST }}
          username: ${{ vars.VM_USERNAME }}
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          proxy_host: ${{ vars.DEPLOYMENT_GATEWAY_HOST }}
          proxy_username: ${{ vars.DEPLOYMENT_GATEWAY_USER }}
          proxy_key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          script: |
            export CR_PAT=${{ secrets.PULL_ACCESS_TOKEN }}
            echo $CR_PAT | docker login ghcr.io -u USERNAME --password-stdin

            # Stop and remove the previous container if it exists
            CONTAINER_NAME="check_republic"
            if [ $(docker ps -q -f name=$CONTAINER_NAME) ]; then
              echo "Stopping and removing the existing container..."
              docker stop $CONTAINER_NAME
              docker rm $CONTAINER_NAME
            fi

            TAG=$(echo "${{ needs.build.outputs.tags }}" | cut -d ',' -f 1)

            echo "Pulling the latest image..."
            docker pull $TAG
            
            echo "Starting a new container..."
            docker run -d --name $CONTAINER_NAME -p 80:80 $TAG
